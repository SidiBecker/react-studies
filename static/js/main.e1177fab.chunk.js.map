{"version":3,"sources":["components/Button/Button.jsx","main/Calculator.jsx","components/Display/Display.jsx","serviceWorker.js","index.js"],"names":["props","classes","type","onClick","e","click","label","className","initialState","displayValue","clearDisplay","operation","values","current","Calculator","state","addDigit","digit","includes","setState","index","newValue","parseFloat","clearMemory","bind","setOperation","this","op","equals","currentOperation","eval","error","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","style","color","textAlign","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e1177fab.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.scss\";\r\n\r\nexport default (props) => {\r\n  let classes = \"button\";\r\n  classes += `${props.type ? ` ${props.type}` : \"\"}`;\r\n  return (\r\n    <button\r\n      onClick={(e) => props.click && props.click(props.label)}\r\n      className={classes}\r\n    >\r\n      {props.label}\r\n    </button>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport './calculator.scss';\r\n\r\nimport Button from './../components/Button/Button';\r\nimport Display from './../components/Display/Display';\r\n\r\nconst initialState = {\r\n  displayValue: '0',\r\n  clearDisplay: false,\r\n  operation: null,\r\n  values: [0, 0],\r\n  current: 0,\r\n};\r\n\r\nexport default class Calculator extends Component {\r\n  state = {\r\n    ...initialState,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.clearMemory = this.clearMemory.bind(this);\r\n    this.setOperation = this.setOperation.bind(this);\r\n  }\r\n\r\n  clearMemory() {\r\n    this.setState({ ...initialState });\r\n  }\r\n\r\n  setOperation(op) {\r\n\r\n    if (this.state.current === 0) {\r\n      this.setState({ operation: op, current: 1, clearDisplay: true });\r\n    } else {\r\n      const equals = op === '=';\r\n      const currentOperation = this.state.operation\r\n\r\n      const values = [...this.state.values];\r\n\r\n      try {\r\n        values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`);\r\n      } catch (error) {\r\n        values[0] = this.state.values[0]\r\n      }\r\n\r\n    \r\n      values[1] = 0;\r\n\r\n      this.setState({\r\n        displayValue: values[0],\r\n        operation: equals ? null : op,\r\n        current: equals ? 0 : 1,\r\n        clearDisplay: !equals,\r\n        values\r\n      })\r\n    }\r\n  }\r\n\r\n  addDigit = (digit) => {\r\n    if (digit === '.' && this.state.displayValue.includes('.')) {\r\n      return;\r\n    }\r\n\r\n    const clearDisplay =\r\n      this.state.displayValue === '0' || this.state.clearDisplay;\r\n\r\n    const currentValue = clearDisplay ? '' : this.state.displayValue;\r\n\r\n    const displayValue = currentValue + digit;\r\n\r\n    this.setState({\r\n      displayValue,\r\n      clearDisplay: false,\r\n    });\r\n\r\n    if (digit !== '.') {\r\n\r\n      const index = this.state.current;\r\n      const newValue = parseFloat(displayValue);\r\n      const [values] = [this.state.values];\r\n      values[index] = newValue;\r\n      this.setState({ values });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculator\">\r\n        <Display value={this.state.displayValue} />\r\n        <Button click={this.clearMemory} label=\"AC\" type=\"triple\" />\r\n        <Button click={this.setOperation} type=\"operation\" label=\"/\" />\r\n        <Button click={this.addDigit} label=\"7\" />\r\n        <Button click={this.addDigit} label=\"8\" />\r\n        <Button click={this.addDigit} label=\"9\" />\r\n        <Button click={this.setOperation} type=\"operation\" label=\"*\" />\r\n        <Button click={this.addDigit} label=\"4\" />\r\n        <Button click={this.addDigit} label=\"5\" />\r\n        <Button click={this.addDigit} label=\"6\" />\r\n        <Button click={this.setOperation} type=\"operation\" label=\"-\" />\r\n        <Button click={this.addDigit} label=\"1\" />\r\n        <Button click={this.addDigit} label=\"2\" />\r\n        <Button click={this.addDigit} label=\"3\" />\r\n        <Button click={this.setOperation} type=\"operation\" label=\"+\" />\r\n        <Button click={this.addDigit} type=\"double\" label=\"0\" />\r\n        <Button click={this.addDigit} label=\".\" />\r\n        <Button click={this.setOperation} type=\"operation\" label=\"=\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './display.scss';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"display\">\r\n      <span>{props.value}</span>\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Calculator from './main/Calculator'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div>\r\n      <h1 style={{ color: \"#f0f0f0\", textAlign: 'center' }}>Calculadora</h1>\r\n      <Calculator />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}